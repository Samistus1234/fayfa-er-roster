// Medical License Management Module
class MedicalLicenseManager {
    constructor() {
        this.licenses = [];
        this.doctors = [];
        this.licenseTypes = ['BLS', 'ACLS', 'PALS', 'SCFHS'];
        this.issuingAuthorities = [
            'American Heart Association',
            'Saudi Heart Association',
            'Saudi Commission for Health Specialties',
            'European Resuscitation Council',
            'International Liaison Committee on Resuscitation'
        ];
        this.filteredLicenses = [];
        this.currentEditingLicense = null;
        console.log('MedicalLicenseManager constructor called');
    }

    // Initialize the license management system
    async init() {
        console.log('Initializing Medical License Manager...');

        try {
            // Step 1: Load doctors first (critical for license display)
            console.log('Step 1: Loading doctors...');
            await this.loadDoctors();

            // Validate doctors loaded successfully
            if (!Array.isArray(this.doctors) || this.doctors.length === 0) {
                throw new Error('Failed to load doctors data');
            }
            console.log('✓ Doctors loaded successfully:', this.doctors.length, 'doctors');

            // Step 2: Load licenses
            console.log('Step 2: Loading licenses...');
            await this.loadLicenses();
            console.log('✓ Licenses loaded successfully:', this.licenses.length, 'licenses');

            // Step 3: Setup event listeners
            console.log('Step 3: Setting up event listeners...');
            this.setupEventListeners();
            console.log('✓ Event listeners setup complete');

            console.log('✓ Medical License Manager initialized successfully');
            return true;
        } catch (error) {
            console.error('❌ Error initializing Medical License Manager:', error);
            this.showNotification('Failed to initialize license management system: ' + error.message, 'error');
            return false;
        }
    }

    // Load doctors data
    async loadDoctors() {
        console.log('Loading doctors data...');

        // Initialize with fallback data first to ensure it's always an array
        const fallbackDoctors = [
            { id: 1, name: 'Dr. Ahmed', specialty: 'Emergency Medicine' },
            { id: 2, name: 'Dr. Sarah', specialty: 'Emergency Medicine' },
            { id: 3, name: 'Dr. Mohammed', specialty: 'Emergency Medicine' },
            { id: 4, name: 'Dr. Fatima', specialty: 'Emergency Medicine' },
            { id: 5, name: 'Dr. Omar', specialty: 'Emergency Medicine' },
            { id: 6, name: 'Dr. Aisha', specialty: 'Emergency Medicine' },
            { id: 7, name: 'Dr. Fathi', specialty: 'Cardiology' },
            { id: 8, name: 'Dr. Joseph', specialty: 'Orthopedics' },
            { id: 9, name: 'Dr. Mahasen', specialty: 'Pediatrics' }
        ];

        // Ensure doctors is always initialized as an array
        this.doctors = [...fallbackDoctors];

        try {
            console.log('Fetching doctors from API...');
            const response = await fetch('/api/doctors');

            if (response.ok) {
                const doctorsResponse = await response.json();
                console.log('API response received:', doctorsResponse);

                // Handle different API response formats
                let doctorsData = null;
                if (Array.isArray(doctorsResponse)) {
                    // Direct array format
                    doctorsData = doctorsResponse;
                } else if (doctorsResponse && doctorsResponse.success && Array.isArray(doctorsResponse.data)) {
                    // Wrapped format: {success: true, data: [...]}
                    doctorsData = doctorsResponse.data;
                } else if (doctorsResponse && Array.isArray(doctorsResponse.doctors)) {
                    // Alternative format: {doctors: [...]}
                    doctorsData = doctorsResponse.doctors;
                }

                // Validate that we have valid doctors data
                if (Array.isArray(doctorsData) && doctorsData.length > 0) {
                    this.doctors = doctorsData;
                    console.log('Doctors loaded successfully from API:', this.doctors.length, 'doctors');
                } else {
                    console.warn('API returned invalid doctors data format, using fallback');
                    console.log('Expected array, got:', typeof doctorsResponse, doctorsResponse);
                    this.doctors = fallbackDoctors;
                }
            } else {
                console.warn('API request failed with status:', response.status);
                this.doctors = fallbackDoctors;
            }
        } catch (error) {
            console.error('Error loading doctors from API:', error);
            this.doctors = fallbackDoctors;
        }

        // Final validation to ensure doctors is always an array
        if (!Array.isArray(this.doctors)) {
            console.error('Critical error: this.doctors is not an array, forcing fallback');
            this.doctors = fallbackDoctors;
        }

        console.log('Final doctors array:', this.doctors);
        return this.doctors;
    }

    // Load licenses data
    async loadLicenses() {
        console.log('Loading licenses data...');

        // Initialize arrays to prevent errors
        this.licenses = [];
        this.filteredLicenses = [];

        try {
            console.log('Fetching licenses from API...');
            const response = await fetch('/api/medical-licenses');

            if (response.ok) {
                const licensesData = await response.json();
                console.log('Licenses API response received:', licensesData);

                // Validate that the response is an array
                if (Array.isArray(licensesData)) {
                    this.licenses = licensesData;
                    this.filteredLicenses = [...this.licenses];
                    console.log('Licenses loaded successfully:', this.licenses.length, 'licenses');

                    // Only update display if doctors are loaded
                    if (Array.isArray(this.doctors) && this.doctors.length > 0) {
                        this.updateLicenseDisplay();
                        this.updateStatistics();
                    } else {
                        console.warn('Doctors not loaded yet, skipping display update');
                    }
                } else {
                    throw new Error('API returned invalid licenses data');
                }
            } else {
                throw new Error(`Failed to load licenses: ${response.status} ${response.statusText}`);
            }
        } catch (error) {
            console.error('Error loading licenses:', error);
            this.showNotification('Failed to load license data: ' + error.message, 'error');

            // Initialize with empty arrays to prevent further errors
            this.licenses = [];
            this.filteredLicenses = [];
        }

        return this.licenses;
    }

    // Setup event listeners
    setupEventListeners() {
        // Search functionality
        const searchInput = document.getElementById('licenseSearch');
        if (searchInput) {
            searchInput.addEventListener('input', () => this.filterLicenses());
        }

        // Filter dropdowns
        const typeFilter = document.getElementById('licenseTypeFilter');
        const statusFilter = document.getElementById('licenseStatusFilter');
        
        if (typeFilter) {
            typeFilter.addEventListener('change', () => this.filterLicenses());
        }
        
        if (statusFilter) {
            statusFilter.addEventListener('change', () => this.filterLicenses());
        }

        // Form submission
        const licenseForm = document.getElementById('licenseForm');
        if (licenseForm) {
            licenseForm.addEventListener('submit', (e) => this.handleFormSubmit(e));
        }

        // Real-time expiration calculation
        const expirationInput = document.getElementById('expirationDate');
        if (expirationInput) {
            expirationInput.addEventListener('change', () => this.calculateDaysUntilExpiration());
        }
    }

    // Show the license management modal
    showModal() {
        console.log('🔧 showModal() called');
        const modal = document.getElementById('licenseModal');
        console.log('Modal element found:', modal);

        if (modal) {
            modal.style.display = 'flex';
            console.log('Modal display set to flex');

            console.log('Loading modal content...');
            this.loadModalContent();

            // Animate modal appearance
            const modalContent = modal.querySelector('.license-modal');
            console.log('Modal content element:', modalContent);

            if (modalContent && typeof gsap !== 'undefined') {
                gsap.fromTo(modalContent,
                    { scale: 0.8, opacity: 0 },
                    { scale: 1, opacity: 1, duration: 0.3, ease: "back.out(1.7)" }
                );
            } else {
                console.warn('GSAP not available or modal content not found, skipping animation');
            }
        } else {
            console.error('❌ Modal element not found!');
        }
    }

    // Close the license management modal
    closeModal() {
        const modal = document.getElementById('licenseModal');
        if (modal) {
            gsap.to(modal.querySelector('.license-modal'), {
                scale: 0.8,
                opacity: 0,
                duration: 0.2,
                onComplete: () => {
                    modal.style.display = 'none';
                }
            });
        }
    }

    // Load modal content
    loadModalContent() {
        console.log('🔧 loadModalContent() called');
        const modalBody = document.getElementById('licenseModalBody');
        console.log('Modal body element found:', modalBody);

        if (!modalBody) {
            console.error('❌ Modal body element not found!');
            return;
        }

        // Load the full content immediately
        console.log('Loading full modal content...');
        this.loadFullModalContent();
    }

    // Load full modal content
    loadFullModalContent() {
        console.log('🔧 loadFullModalContent() called');
        const modalBody = document.getElementById('licenseModalBody');

        if (!modalBody) {
            console.error('❌ Modal body element not found in loadFullModalContent!');
            return;
        }

        // First, test with simple content to verify modal body works
        console.log('Testing modal body with simple content...');
        modalBody.innerHTML = '<div id="test-element" style="padding: 20px; background: green; color: white;">TEST: Modal body is working!</div>';

        const testElement = document.getElementById('test-element');
        console.log('Test element found:', testElement);

        if (!testElement) {
            console.error('❌ Even simple content is not working in modal body!');
            return;
        }

        console.log('✅ Simple content test passed, loading full content...');

        const htmlContent = `
            <div class="license-management-container">
                <!-- License Status Overview -->
                <div class="license-overview glass-effect">
                    <h3><i class="fas fa-chart-bar"></i> License Status Overview</h3>
                    <div class="status-cards">
                        <div class="status-card total">
                            <div class="status-number" id="totalLicenses">0</div>
                            <div class="status-label">Total Licenses</div>
                        </div>
                        <div class="status-card active">
                            <div class="status-number" id="activeLicenses">0</div>
                            <div class="status-label">Active</div>
                        </div>
                        <div class="status-card warning">
                            <div class="status-number" id="expiringSoonLicenses">0</div>
                            <div class="status-label">Expiring Soon</div>
                        </div>
                        <div class="status-card danger">
                            <div class="status-number" id="expiredLicenses">0</div>
                            <div class="status-label">Expired</div>
                        </div>
                    </div>
                </div>

                <!-- Action Buttons -->
                <div class="action-buttons glass-effect">
                    <button class="btn btn-primary" onclick="licenseManager.showAddLicenseForm()">
                        <i class="fas fa-plus"></i> Add New License
                    </button>
                    <button class="btn btn-warning" onclick="licenseManager.checkExpiryAlerts()">
                        <i class="fas fa-exclamation-triangle"></i> Check Expiry Alerts
                    </button>
                    <button class="btn btn-secondary" onclick="licenseManager.exportLicenses('csv')">
                        <i class="fas fa-download"></i> Export CSV
                    </button>
                    <button class="btn btn-secondary" onclick="licenseManager.exportLicenses('pdf')">
                        <i class="fas fa-file-pdf"></i> Export PDF
                    </button>
                </div>

                <!-- License Alerts -->
                <div class="license-alerts glass-effect" id="licenseAlerts" style="display: none;">
                    <h3><i class="fas fa-bell"></i> License Alerts</h3>
                    <div class="alert-list" id="alertList">
                        <!-- Alert items will be populated here -->
                    </div>
                </div>

                <!-- License List -->
                <div class="license-list-container glass-effect">
                    <div class="list-header">
                        <h3><i class="fas fa-list"></i> All Licenses</h3>
                        <div class="search-filter">
                            <input type="text" id="licenseSearch" placeholder="Search licenses..." class="form-control">
                            <select id="licenseTypeFilter" class="form-select">
                                <option value="">All Types</option>
                                <option value="BLS">BLS</option>
                                <option value="ACLS">ACLS</option>
                                <option value="PALS">PALS</option>
                                <option value="SCFHS">SCFHS</option>
                            </select>
                            <select id="licenseStatusFilter" class="form-select">
                                <option value="">All Status</option>
                                <option value="Active">Active</option>
                                <option value="Expiring Soon">Expiring Soon</option>
                                <option value="Expired">Expired</option>
                            </select>
                        </div>
                    </div>
                    <div class="license-table-container">
                        <table class="license-table table table-striped" id="licenseTable">
                            <thead>
                                <tr>
                                    <th>Doctor</th>
                                    <th>Type</th>
                                    <th>License Number</th>
                                    <th>Issue Date</th>
                                    <th>Expiry Date</th>
                                    <th>Status</th>
                                    <th>Days Until Expiry</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="licenseTableBody">
                                <!-- License entries will be populated here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        `;

        console.log('Generated HTML content length:', htmlContent.length);
        console.log('HTML content preview (first 500 chars):', htmlContent.substring(0, 500));
        console.log('Checking if licenseTableBody is in HTML content:', htmlContent.includes('licenseTableBody'));

        console.log('Setting modal body HTML content...');
        modalBody.innerHTML = htmlContent;
        console.log('Modal body HTML content set. New length:', modalBody.innerHTML.length);

        // Immediately check if the element exists in the DOM
        const immediateCheck = document.getElementById('licenseTableBody');
        console.log('Immediate check for licenseTableBody after innerHTML set:', immediateCheck);

        // Force a DOM reflow to ensure elements are rendered
        console.log('Forcing DOM reflow...');
        modalBody.offsetHeight; // This forces a reflow

        // Use requestAnimationFrame to ensure DOM is painted
        requestAnimationFrame(() => {
            console.log('DOM paint cycle complete, checking for elements...');

            // Use a more robust DOM ready check
            this.waitForDOMElements(() => {
                console.log('✅ DOM elements confirmed ready, setting up components...');

                // Re-setup event listeners for the new content
                console.log('Setting up event listeners...');
                this.setupEventListeners();

                console.log('Updating license display...');
                this.updateLicenseDisplay();

                console.log('Updating statistics...');
                this.updateStatistics();

                console.log('✅ Modal content loaded successfully');
            });
        });
    }

    // Wait for DOM elements to be available
    waitForDOMElements(callback, maxAttempts = 50, attempt = 1) {
        console.log(`🔍 Checking for DOM elements (attempt ${attempt}/${maxAttempts})...`);

        // Check for required elements
        const requiredElements = [
            'licenseTableBody',
            'totalLicenses',
            'activeLicenses',
            'expiringSoonLicenses',
            'expiredLicenses'
        ];

        const missingElements = [];
        const foundElements = [];

        requiredElements.forEach(elementId => {
            const element = document.getElementById(elementId);
            if (element) {
                foundElements.push(elementId);
            } else {
                missingElements.push(elementId);
            }
        });

        console.log('✅ Found elements:', foundElements);
        if (missingElements.length > 0) {
            console.log('❌ Missing elements:', missingElements);
        }

        // If all elements are found, execute callback
        if (missingElements.length === 0) {
            console.log('🎉 All required DOM elements found!');
            callback();
            return;
        }

        // If we haven't reached max attempts, try again
        if (attempt < maxAttempts) {
            setTimeout(() => {
                this.waitForDOMElements(callback, maxAttempts, attempt + 1);
            }, 50); // Check every 50ms
        } else {
            console.error('❌ Failed to find all required DOM elements after', maxAttempts, 'attempts');
            console.error('Missing elements:', missingElements);

            // Try to proceed anyway with error handling
            console.log('⚠️ Proceeding with available elements...');
            callback();
        }
    }

    // Update license display
    updateLicenseDisplay() {
        console.log('🔧 updateLicenseDisplay() called');
        const tableBody = document.getElementById('licenseTableBody');
        console.log('Table body element found:', tableBody);

        if (!tableBody) {
            console.error('❌ License table body not found');
            console.log('Available elements with "license" in ID:');
            const allElements = document.querySelectorAll('[id*="license"]');
            allElements.forEach(el => console.log('- Found element:', el.id, el.tagName));

            // Try to find the modal body and add a fallback message
            const modalBody = document.getElementById('licenseModalBody');
            if (modalBody) {
                console.log('Adding fallback content to modal body...');
                modalBody.innerHTML = `
                    <div style="padding: 2rem; text-align: center; background: rgba(255,255,255,0.1); border-radius: 15px; margin: 1rem;">
                        <h3 style="color: var(--text-primary); margin-bottom: 1rem;">
                            <i class="fas fa-exclamation-triangle" style="color: #f59e0b;"></i>
                            Loading Medical License Management...
                        </h3>
                        <p style="color: var(--text-secondary); margin-bottom: 1rem;">
                            The license management interface is loading. If this message persists, please refresh the page.
                        </p>
                        <div style="margin: 1rem 0;">
                            <div style="display: inline-block; padding: 0.5rem 1rem; background: rgba(59, 130, 246, 0.2); border-radius: 8px; color: #3b82f6;">
                                API Status: ✅ Connected (${this.licenses.length} licenses, ${this.doctors.length} doctors loaded)
                            </div>
                        </div>
                        <button onclick="licenseManager.loadModalContent()" style="padding: 0.5rem 1rem; background: var(--primary-gradient); color: white; border: none; border-radius: 8px; cursor: pointer;">
                            <i class="fas fa-refresh"></i> Retry Loading
                        </button>
                    </div>
                `;
            }
            return;
        }

        // Validate that doctors array is properly initialized
        if (!Array.isArray(this.doctors)) {
            console.error('❌ Critical error: this.doctors is not an array in updateLicenseDisplay');
            this.doctors = []; // Initialize as empty array to prevent crashes
        }

        // Validate that filteredLicenses array is properly initialized
        if (!Array.isArray(this.filteredLicenses)) {
            console.error('❌ Critical error: this.filteredLicenses is not an array');
            this.filteredLicenses = [];
        }

        console.log('✅ Doctors available:', this.doctors.length);
        console.log('✅ Filtered licenses:', this.filteredLicenses.length);
        console.log('Sample doctor:', this.doctors[0]);
        console.log('Sample license:', this.filteredLicenses[0]);

        if (this.filteredLicenses.length === 0) {
            tableBody.innerHTML = `
                <tr>
                    <td colspan="8" class="text-center">
                        <div class="empty-state">
                            <i class="fas fa-certificate fa-3x text-muted mb-3"></i>
                            <h5>No licenses found</h5>
                            <p class="text-muted">Add a new license or adjust your filters</p>
                        </div>
                    </td>
                </tr>
            `;
            return;
        }

        try {
            tableBody.innerHTML = this.filteredLicenses.map(license => {
                // Safe doctor lookup with fallback
                let doctor = null;
                let doctorName = `Doctor ${license.staffMemberId}`;

                try {
                    if (Array.isArray(this.doctors) && this.doctors.length > 0) {
                        doctor = this.doctors.find(d => d && d.id === license.staffMemberId);
                        if (doctor && doctor.name) {
                            doctorName = doctor.name;
                        }
                    }
                } catch (findError) {
                    console.error('Error finding doctor:', findError);
                }

                const statusClass = this.getStatusClass(license.status);
                const daysClass = this.getDaysClass(license.daysUntilExpiration);

            return `
                <tr>
                    <td>
                        <div class="doctor-info">
                            <strong>${doctorName}</strong>
                        </div>
                    </td>
                    <td>
                        <span class="license-type-badge ${license.licenseType.toLowerCase()}">${license.licenseType}</span>
                    </td>
                    <td><code>${license.licenseNumber}</code></td>
                    <td>${this.formatDate(license.issueDate)}</td>
                    <td>${this.formatDate(license.expirationDate)}</td>
                    <td>
                        <span class="status-badge ${statusClass}">${license.status}</span>
                    </td>
                    <td>
                        <span class="days-badge ${daysClass}">
                            ${license.daysUntilExpiration !== null ? 
                                (license.daysUntilExpiration >= 0 ? 
                                    `${license.daysUntilExpiration} days` : 
                                    `${Math.abs(license.daysUntilExpiration)} days ago`) : 
                                'N/A'}
                        </span>
                    </td>
                    <td>
                        <div class="action-buttons">
                            <button class="btn btn-sm btn-outline-primary" onclick="licenseManager.editLicense(${license.id})" title="Edit">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-danger" onclick="licenseManager.deleteLicense(${license.id})" title="Delete">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            `;
            }).join('');

            console.log('License display updated successfully');
        } catch (error) {
            console.error('Error updating license display:', error);
            tableBody.innerHTML = `
                <tr>
                    <td colspan="8" class="text-center">
                        <div class="empty-state">
                            <i class="fas fa-exclamation-triangle fa-3x text-danger mb-3"></i>
                            <h5>Error Loading Licenses</h5>
                            <p class="text-muted">There was an error displaying the license data. Please try refreshing.</p>
                        </div>
                    </td>
                </tr>
            `;
        }
    }

    // Update statistics
    updateStatistics() {
        const stats = this.calculateStatistics();
        
        const elements = {
            totalLicenses: document.getElementById('totalLicenses'),
            activeLicenses: document.getElementById('activeLicenses'),
            expiringSoonLicenses: document.getElementById('expiringSoonLicenses'),
            expiredLicenses: document.getElementById('expiredLicenses')
        };

        if (elements.totalLicenses) elements.totalLicenses.textContent = stats.total;
        if (elements.activeLicenses) elements.activeLicenses.textContent = stats.active;
        if (elements.expiringSoonLicenses) elements.expiringSoonLicenses.textContent = stats.expiringSoon;
        if (elements.expiredLicenses) elements.expiredLicenses.textContent = stats.expired;
    }

    // Calculate statistics
    calculateStatistics() {
        const total = this.licenses.length;
        const active = this.licenses.filter(l => l.status === 'Active').length;
        const expiringSoon = this.licenses.filter(l => l.status === 'Expiring Soon').length;
        const expired = this.licenses.filter(l => l.status === 'Expired').length;

        return { total, active, expiringSoon, expired };
    }

    // Filter licenses
    filterLicenses() {
        console.log('Filtering licenses...');

        // Validate arrays before filtering
        if (!Array.isArray(this.licenses)) {
            console.error('Cannot filter: this.licenses is not an array');
            this.licenses = [];
        }

        if (!Array.isArray(this.doctors)) {
            console.error('Cannot filter: this.doctors is not an array');
            this.doctors = [];
        }

        const searchTerm = document.getElementById('licenseSearch')?.value.toLowerCase() || '';
        const typeFilter = document.getElementById('licenseTypeFilter')?.value || '';
        const statusFilter = document.getElementById('licenseStatusFilter')?.value || '';

        try {
            this.filteredLicenses = this.licenses.filter(license => {
                // Safe doctor lookup
                let doctorName = '';
                try {
                    if (Array.isArray(this.doctors) && this.doctors.length > 0) {
                        const doctor = this.doctors.find(d => d && d.id === license.staffMemberId);
                        doctorName = doctor && doctor.name ? doctor.name.toLowerCase() : '';
                    }
                } catch (findError) {
                    console.error('Error finding doctor in filter:', findError);
                    doctorName = '';
                }

                const matchesSearch = !searchTerm ||
                    doctorName.includes(searchTerm) ||
                    (license.licenseType && license.licenseType.toLowerCase().includes(searchTerm)) ||
                    (license.licenseNumber && license.licenseNumber.toLowerCase().includes(searchTerm)) ||
                    (license.issuingAuthority && license.issuingAuthority.toLowerCase().includes(searchTerm));

                const matchesType = !typeFilter || license.licenseType === typeFilter;
                const matchesStatus = !statusFilter || license.status === statusFilter;

                return matchesSearch && matchesType && matchesStatus;
            });

            console.log('Filtered licenses:', this.filteredLicenses.length);
            this.updateLicenseDisplay();
        } catch (error) {
            console.error('Error filtering licenses:', error);
            this.filteredLicenses = [...this.licenses]; // Fallback to showing all licenses
            this.updateLicenseDisplay();
        }
    }

    // Get status CSS class
    getStatusClass(status) {
        switch (status) {
            case 'Active': return 'status-active';
            case 'Expiring Soon': return 'status-warning';
            case 'Expired': return 'status-danger';
            default: return 'status-unknown';
        }
    }

    // Get days CSS class
    getDaysClass(days) {
        if (days === null) return 'days-unknown';
        if (days < 0) return 'days-expired';
        if (days <= 30) return 'days-warning';
        return 'days-good';
    }

    // Format date
    formatDate(dateString) {
        if (!dateString) return 'N/A';
        const date = new Date(dateString);
        return date.toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
        });
    }

    // Show notification
    showNotification(message, type = 'info') {
        // Create notification element
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
            <div class="notification-content">
                <i class="fas fa-${type === 'error' ? 'exclamation-circle' : type === 'success' ? 'check-circle' : 'info-circle'}"></i>
                <span>${message}</span>
            </div>
        `;

        // Add to page
        document.body.appendChild(notification);

        // Animate in
        gsap.fromTo(notification, 
            { x: 300, opacity: 0 },
            { x: 0, opacity: 1, duration: 0.3 }
        );

        // Remove after delay
        setTimeout(() => {
            gsap.to(notification, {
                x: 300,
                opacity: 0,
                duration: 0.3,
                onComplete: () => notification.remove()
            });
        }, 3000);
    }

    // Show add license form
    showAddLicenseForm() {
        this.currentEditingLicense = null;
        this.showLicenseForm();
    }

    // Show license form (add or edit)
    showLicenseForm(license = null) {
        const modalBody = document.getElementById('licenseModalBody');
        if (!modalBody) return;

        const isEdit = license !== null;
        this.currentEditingLicense = license;

        modalBody.innerHTML = `
            <div class="license-form-container glass-effect">
                <div class="form-header">
                    <h3><i class="fas fa-${isEdit ? 'edit' : 'plus'}"></i> ${isEdit ? 'Edit' : 'Add New'} License</h3>
                    <button class="btn btn-secondary" onclick="licenseManager.loadModalContent()">
                        <i class="fas fa-arrow-left"></i> Back to List
                    </button>
                </div>

                <form id="licenseForm" class="license-form">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="staffMemberId" class="form-label">Staff Member *</label>
                                <select id="staffMemberId" name="staffMemberId" class="form-select" required>
                                    <option value="">Select Doctor</option>
                                    ${this.doctors.map(doctor =>
                                        `<option value="${doctor.id}" ${license && license.staffMemberId === doctor.id ? 'selected' : ''}>
                                            ${doctor.name} - ${doctor.specialty || 'Emergency Medicine'}
                                        </option>`
                                    ).join('')}
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="licenseType" class="form-label">License Type *</label>
                                <select id="licenseType" name="licenseType" class="form-select" required>
                                    <option value="">Select Type</option>
                                    ${this.licenseTypes.map(type =>
                                        `<option value="${type}" ${license && license.licenseType === type ? 'selected' : ''}>${type}</option>`
                                    ).join('')}
                                </select>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="licenseNumber" class="form-label">License Number *</label>
                                <input type="text" id="licenseNumber" name="licenseNumber" class="form-control"
                                       value="${license ? license.licenseNumber : ''}" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="issuingAuthority" class="form-label">Issuing Authority *</label>
                                <select id="issuingAuthority" name="issuingAuthority" class="form-select" required>
                                    <option value="">Select Authority</option>
                                    ${this.issuingAuthorities.map(authority =>
                                        `<option value="${authority}" ${license && license.issuingAuthority === authority ? 'selected' : ''}>${authority}</option>`
                                    ).join('')}
                                </select>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="issueDate" class="form-label">Issue Date *</label>
                                <input type="date" id="issueDate" name="issueDate" class="form-control"
                                       value="${license ? license.issueDate : ''}" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="expirationDate" class="form-label">Expiration Date *</label>
                                <input type="date" id="expirationDate" name="expirationDate" class="form-control"
                                       value="${license ? license.expirationDate : ''}" required>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="daysUntilExpiration" class="form-label">Days Until Expiration</label>
                                <input type="text" id="daysUntilExpiration" class="form-control" readonly
                                       value="${license && license.daysUntilExpiration !== null ? license.daysUntilExpiration + ' days' : 'Calculate automatically'}">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="status" class="form-label">Status</label>
                                <input type="text" id="status" class="form-control" readonly
                                       value="${license ? license.status : 'Auto-calculated'}">
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="additionalNotes" class="form-label">Additional Notes</label>
                        <textarea id="additionalNotes" name="additionalNotes" class="form-control" rows="3"
                                  placeholder="Any special notes about this certification...">${license ? license.additionalNotes || '' : ''}</textarea>
                    </div>

                    <div class="form-actions">
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save"></i> ${isEdit ? 'Update' : 'Add'} License
                        </button>
                        <button type="button" class="btn btn-secondary" onclick="licenseManager.loadModalContent()">
                            <i class="fas fa-times"></i> Cancel
                        </button>
                    </div>
                </form>
            </div>
        `;

        // Setup form event listeners
        this.setupFormEventListeners();
    }

    // Setup form event listeners
    setupFormEventListeners() {
        const form = document.getElementById('licenseForm');
        const expirationInput = document.getElementById('expirationDate');

        if (form) {
            form.addEventListener('submit', (e) => this.handleFormSubmit(e));
        }

        if (expirationInput) {
            expirationInput.addEventListener('change', () => this.calculateDaysUntilExpiration());
        }
    }

    // Calculate days until expiration in real-time
    calculateDaysUntilExpiration() {
        const expirationInput = document.getElementById('expirationDate');
        const daysInput = document.getElementById('daysUntilExpiration');
        const statusInput = document.getElementById('status');

        if (!expirationInput || !daysInput || !statusInput) return;

        const expirationDate = expirationInput.value;
        if (!expirationDate) {
            daysInput.value = 'Select expiration date';
            statusInput.value = 'Unknown';
            return;
        }

        const today = new Date();
        const expiry = new Date(expirationDate);
        const diffTime = expiry - today;
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

        daysInput.value = diffDays >= 0 ? `${diffDays} days` : `${Math.abs(diffDays)} days ago`;

        let status;
        if (diffDays < 0) status = 'Expired';
        else if (diffDays <= 30) status = 'Expiring Soon';
        else status = 'Active';

        statusInput.value = status;

        // Update input styling based on status
        daysInput.className = `form-control ${this.getDaysClass(diffDays)}`;
        statusInput.className = `form-control ${this.getStatusClass(status)}`;
    }

    // Handle form submission
    async handleFormSubmit(e) {
        e.preventDefault();

        const formData = new FormData(e.target);
        const licenseData = {
            staffMemberId: parseInt(formData.get('staffMemberId')),
            licenseType: formData.get('licenseType'),
            licenseNumber: formData.get('licenseNumber'),
            issueDate: formData.get('issueDate'),
            expirationDate: formData.get('expirationDate'),
            issuingAuthority: formData.get('issuingAuthority'),
            additionalNotes: formData.get('additionalNotes') || ''
        };

        try {
            let response;
            if (this.currentEditingLicense) {
                // Update existing license
                response = await fetch(`/api/medical-licenses/${this.currentEditingLicense.id}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(licenseData)
                });
            } else {
                // Create new license
                response = await fetch('/api/medical-licenses', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(licenseData)
                });
            }

            if (response.ok) {
                const result = await response.json();
                this.showNotification(
                    `License ${this.currentEditingLicense ? 'updated' : 'added'} successfully!`,
                    'success'
                );
                await this.loadLicenses();
                this.loadModalContent();
            } else {
                const error = await response.json();
                throw new Error(error.error || 'Failed to save license');
            }
        } catch (error) {
            console.error('Error saving license:', error);
            this.showNotification(`Failed to save license: ${error.message}`, 'error');
        }
    }

    // Edit license
    editLicense(licenseId) {
        const license = this.licenses.find(l => l.id === licenseId);
        if (license) {
            this.showLicenseForm(license);
        }
    }

    // Delete license
    async deleteLicense(licenseId) {
        const license = this.licenses.find(l => l.id === licenseId);
        if (!license) return;

        const doctor = this.doctors.find(d => d.id === license.staffMemberId);
        const doctorName = doctor ? doctor.name : `Doctor ${license.staffMemberId}`;

        if (!confirm(`Are you sure you want to delete the ${license.licenseType} license for ${doctorName}?`)) {
            return;
        }

        try {
            const response = await fetch(`/api/medical-licenses/${licenseId}`, {
                method: 'DELETE'
            });

            if (response.ok) {
                this.showNotification('License deleted successfully!', 'success');
                await this.loadLicenses();
                this.updateLicenseDisplay();
                this.updateStatistics();
            } else {
                const error = await response.json();
                throw new Error(error.error || 'Failed to delete license');
            }
        } catch (error) {
            console.error('Error deleting license:', error);
            this.showNotification(`Failed to delete license: ${error.message}`, 'error');
        }
    }

    // Check expiry alerts
    async checkExpiryAlerts() {
        try {
            const response = await fetch('/api/medical-licenses/alerts/expiring?days=30');
            if (response.ok) {
                const alerts = await response.json();
                this.showExpiryAlerts(alerts);
            } else {
                throw new Error('Failed to fetch expiry alerts');
            }
        } catch (error) {
            console.error('Error fetching expiry alerts:', error);
            this.showNotification('Failed to fetch expiry alerts', 'error');
        }
    }

    // Show expiry alerts
    showExpiryAlerts(alerts) {
        const alertsContainer = document.getElementById('licenseAlerts');
        const alertList = document.getElementById('alertList');

        if (!alertsContainer || !alertList) return;

        if (alerts.length === 0) {
            alertList.innerHTML = `
                <div class="alert alert-success">
                    <i class="fas fa-check-circle"></i>
                    <strong>All Clear!</strong> No licenses are expiring within the next 30 days.
                </div>
            `;
        } else {
            alertList.innerHTML = alerts.map(alert => {
                const doctor = this.doctors.find(d => d.id === alert.staffMemberId);
                const doctorName = doctor ? doctor.name : `Doctor ${alert.staffMemberId}`;
                const alertClass = alert.alertLevel === 'critical' ? 'alert-danger' :
                                  alert.alertLevel === 'warning' ? 'alert-warning' : 'alert-info';

                return `
                    <div class="alert ${alertClass}">
                        <div class="alert-content">
                            <div class="alert-header">
                                <i class="fas fa-${alert.alertLevel === 'critical' ? 'exclamation-triangle' : 'clock'}"></i>
                                <strong>${doctorName} - ${alert.licenseType}</strong>
                            </div>
                            <div class="alert-details">
                                <p>License Number: <code>${alert.licenseNumber}</code></p>
                                <p>Expires: ${this.formatDate(alert.expirationDate)}
                                   <span class="badge bg-${alert.alertLevel === 'critical' ? 'danger' : 'warning'}">
                                       ${alert.daysUntilExpiration} days remaining
                                   </span>
                                </p>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
        }

        alertsContainer.style.display = 'block';

        // Scroll to alerts
        alertsContainer.scrollIntoView({ behavior: 'smooth' });
    }

    // Export licenses
    async exportLicenses(format) {
        try {
            const response = await fetch(`/api/medical-licenses/export/${format}`);

            if (format === 'csv') {
                const csvContent = await response.text();
                this.downloadFile(csvContent, 'medical-licenses.csv', 'text/csv');
            } else if (format === 'pdf') {
                const pdfData = await response.json();
                this.generatePDF(pdfData);
            }

            this.showNotification(`Licenses exported to ${format.toUpperCase()} successfully!`, 'success');
        } catch (error) {
            console.error('Error exporting licenses:', error);
            this.showNotification(`Failed to export to ${format.toUpperCase()}`, 'error');
        }
    }

    // Download file
    downloadFile(content, filename, contentType) {
        const blob = new Blob([content], { type: contentType });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url);
    }

    // Generate PDF (simplified version)
    generatePDF(data) {
        // For now, create a simple HTML report and open in new window for printing
        const reportWindow = window.open('', '_blank');
        reportWindow.document.write(`
            <html>
                <head>
                    <title>Medical License Report</title>
                    <style>
                        body { font-family: Arial, sans-serif; margin: 20px; }
                        table { width: 100%; border-collapse: collapse; margin-top: 20px; }
                        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                        th { background-color: #f2f2f2; }
                        .header { text-align: center; margin-bottom: 30px; }
                        .stats { display: flex; justify-content: space-around; margin: 20px 0; }
                        .stat-box { text-align: center; padding: 10px; border: 1px solid #ddd; }
                    </style>
                </head>
                <body>
                    <div class="header">
                        <h1>Medical License Management Report</h1>
                        <p>Generated on: ${new Date().toLocaleDateString()}</p>
                    </div>

                    <div class="stats">
                        <div class="stat-box">
                            <h3>${data.statistics.total}</h3>
                            <p>Total Licenses</p>
                        </div>
                        <div class="stat-box">
                            <h3>${data.statistics.active}</h3>
                            <p>Active</p>
                        </div>
                        <div class="stat-box">
                            <h3>${data.statistics.expiringSoon}</h3>
                            <p>Expiring Soon</p>
                        </div>
                        <div class="stat-box">
                            <h3>${data.statistics.expired}</h3>
                            <p>Expired</p>
                        </div>
                    </div>

                    <table>
                        <thead>
                            <tr>
                                <th>Doctor</th>
                                <th>Type</th>
                                <th>License Number</th>
                                <th>Issue Date</th>
                                <th>Expiry Date</th>
                                <th>Status</th>
                                <th>Days Until Expiry</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${data.data.map(license => {
                                const doctor = this.doctors.find(d => d.id === license.staffMemberId);
                                const doctorName = doctor ? doctor.name : `Doctor ${license.staffMemberId}`;
                                return `
                                    <tr>
                                        <td>${doctorName}</td>
                                        <td>${license.licenseType}</td>
                                        <td>${license.licenseNumber}</td>
                                        <td>${this.formatDate(license.issueDate)}</td>
                                        <td>${this.formatDate(license.expirationDate)}</td>
                                        <td>${license.status}</td>
                                        <td>${license.daysUntilExpiration !== null ?
                                            (license.daysUntilExpiration >= 0 ?
                                                `${license.daysUntilExpiration} days` :
                                                `${Math.abs(license.daysUntilExpiration)} days ago`) :
                                            'N/A'}</td>
                                    </tr>
                                `;
                            }).join('')}
                        </tbody>
                    </table>
                </body>
            </html>
        `);
        reportWindow.document.close();
    }
}

// Initialize the license manager
const licenseManager = new MedicalLicenseManager();

// Debug log to confirm the script is loaded
console.log('Medical License Management system loaded successfully');

// Global functions for dashboard integration
function showLicenses() {
    console.log('🔧 showLicenses() called - initializing Medical License Management');

    // Validate that licenseManager exists
    if (!licenseManager) {
        console.error('❌ License manager not available');
        if (typeof showToast === 'function') {
            showToast('Medical License Management system not available', 'error');
        } else {
            alert('Medical License Management system not available');
        }
        return;
    }

    // Show loading indicator
    if (typeof showToast === 'function') {
        showToast('Loading Medical License Management...', 'info');
    }

    licenseManager.init().then((success) => {
        if (success) {
            console.log('✅ License manager initialized successfully, showing modal');
            licenseManager.showModal();
        } else {
            console.error('❌ License manager initialization failed');
            if (typeof showToast === 'function') {
                showToast('Failed to initialize Medical License Management', 'error');
            }
        }
    }).catch(error => {
        console.error('❌ Error initializing license manager:', error);
        if (typeof showToast === 'function') {
            showToast('Failed to load Medical License Management: ' + error.message, 'error');
        } else {
            alert('Failed to load Medical License Management: ' + error.message);
        }
    });
}

function closeLicenseModal() {
    console.log('closeLicenseModal() called');
    licenseManager.closeModal();
}

// Make sure the functions are available globally
window.showLicenses = showLicenses;
window.closeLicenseModal = closeLicenseModal;
window.licenseManager = licenseManager;

console.log('Medical License Management script loaded completely');
console.log('showLicenses function:', typeof showLicenses);
console.log('licenseManager:', typeof licenseManager);
